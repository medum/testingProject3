trigger:
- task: InstallSSHKey@0
  inputs:
    knownHostsEntry: 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
    sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCm7A8STmYHdsy1Ka9Kjnu64hylelvI4fzyFA/989jrsbQ0pg1JpCpTdXfahUUScpjSmNmdx8EZtVSZgERrOPkFach6/FFP/yuGB9HYQ3Fr4dpBxqmyyzC+ECOG7ISfFUMV47JBojzFvu47fdV8Q+phmCo41caPXMLWYYvta0ta2xFa4SM9o2zcDBbk4XLYxqazOtbvuBwF4OLIoTOPNj9ge9KX0snShprA+6AQXJPbUiUXl1e/ABq7oTZyw0NwgYQA14PD4T09aiY7jNX4qC0PlRBZo1wXs3rQ0krm5A6rOp/G/1exh0c152ndjyJbkTtqU2h3L4fsGtdgkL7fl0TD katy@cc-67cac3a2-65966576b5-pwmxt'
    sshKeySecureFile: 'b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn NhAAAAAwEAAQAAAQEApuwPEk5mB3bMtSmvSo57uuIcpXpbyOH88hQP/fPY67G0NKYNSaQq U3V32oVFEnKY0pjZncfBGbVUmYBEazj5BWnIevxRT/8rhgfR2ENxa+HaQcapssswvhAjhu yEnxVDFeOyQaI8xb7uO33VfEPqYZgqONXGj1zC1mGL7WtLWtsRWuEjPaNs3AwW5OFy2Mam szrW77gcBeDiyKEzjzY/YHvSl9LJ0oaawPugEFyT21IlF5dXvwAau6E2csNDcIGEANeDw+ E9PWomO4zV+KgtD5UQWaNcF7N60NJK5uQOqzqfxv9XsYdHNedp3Y8iW5E7alNody+H7BrX YJC+35dEwwAAA9gZaD3SGWg90gAAAAdzc2gtcnNhAAABAQCm7A8STmYHdsy1Ka9Kjnu64h ylelvI4fzyFA/989jrsbQ0pg1JpCpTdXfahUUScpjSmNmdx8EZtVSZgERrOPkFach6/FFP /yuGB9HYQ3Fr4dpBxqmyyzC+ECOG7ISfFUMV47JBojzFvu47fdV8Q+phmCo41caPXMLWYY vta0ta2xFa4SM9o2zcDBbk4XLYxqazOtbvuBwF4OLIoTOPNj9ge9KX0snShprA+6AQXJPb UiUXl1e/ABq7oTZyw0NwgYQA14PD4T09aiY7jNX4qC0PlRBZo1wXs3rQ0krm5A6rOp/G/1 exh0c152ndjyJbkTtqU2h3L4fsGtdgkL7fl0TDAAAAAwEAAQAAAQBwBt3Wm2c+eyzIKUHL 9/RyaG5xYL1ZBNKOZYiWF6HuDUW0T/16/wKpIJ1fuzGwP9jw/kSO8BFY/6nXm45Pp9z5FR XH9K9d0ROU0Iq1ag4lKV8h5gLeTCBabtppIzOe0NZFSpvIEOpYjNu2ca1lyO70sPslSdQJ Q2hAGRegL/JS9r4eoG9y8xUdMDxg7k9WFMrvSatT9TjlO1WDdbnjsgB/kYpyZ5Oul5L6tR nkPrE4PJvU/8AMluZsqLAY167NV5kwncwepsjZN8lOmNcudkzc2B3cnkGRmZbM+1EXBTQ6 YuQ/1MV9FP0pxZOBsKox03wOQ3T78RMsr7zsE2/cIgOBAAAAgQCJkNYNUnNAf7Y21IzJUk Rj2snq2SoVcts1Kd45ykhliQOkY0JWnJl7yPWbyUarg/s8M+9j+rX2NysIy2v6cM3LBVo/ stSc9lO9G4xtuGhqRsFYHy3jOqSdYW9znroHe60lYh0B5zWNxhVFedI2Nx0SKMaigALcVR FGtauniCKCqQAAAIEA0a33qd/L/zOqxRQ+C6CkXAq7mDbSK6OEfjG9qWrmLf7atkgVCcQb 0mB7wdwyaLEf82YU1yA4UsjaAc2UIe211ttgkyWJaKQDB/ewa10RSMgzir7sveyrrU+zif 70lQzUHWG0DrM4gVKznoIg3J1ccZR/+/GrXah7EcDhoQ4boAUAAACBAMvMBirvkSpTstdZ YFoQKM3wvC4RFYtIcpZTNv6t4cikS3h7Z6rhjv/F3YZVLI7ccxQSA0O86ZFbRPFmd0ITSb qx2ylCUaP88xHvejqy+ngkhfbo3h0BPuI7owB/IimggDhApL9ARa4l3RxtMXxkimHl2J64 JBDC0Mr0zEnGk5QnAAAAIWthdHlAY2MtNjdjYWMzYTItNjU5NjY1NzZiNS1wd214dAE='
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md


name: CICD Pipelines
variables:
  python.version: "3.7.6"
  applicationname: 'jc-test2-AppService'
stages:
  - stage: ProvisionIaC
    displayName: CICD Resources 
    jobs:
    - job: Azure_IaC
      displayName: Azure IaC
      pool:
        vmImage: 'ubuntu-18.04'
      steps:
      - task: DownloadSecureFile@1
        name: tfvardef
        displayName: Download terraform.tfvars
        inputs:
          secureFile: 'terraform.tfvars'

      # Needed for Terraform VM deployment
      # - task: InstallSSHKey@0
      #   displayName: Security Access
      #   inputs:
      #     knownHostsEntry: 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
      #     sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
      #     sshKeySecureFile: 'id_rsa'
      
      - task: Bash@3
        displayName: Coping terraform.tfvars
        inputs:
          targetType: 'inline'
          script: cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform
      
      - task: Cache@2
        displayName: Install Terraform
        inputs:
          terraformVersion: '0.14.8'
      
      - task: Cache@2
        displayName: Terraform Init
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: 'AZServiceConnection'
          backendAzureRmResourceGroupName: 'cloud-shell-storage-eastus'
          backendAzureRmStorageAccountName: 'cs2100320013d36b995'
          backendAzureRmContainerName: 'demo-container'
          backendAzureRmKey: 'terraform.cs2100320013d36b995'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      
      - task: Cache@2
        displayName: Terraform Validate
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          environmentServiceNameAzureRM: 'AZServiceConnection'
      
      - task: Cache@2
        displayName: Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          environmentServiceNameAzureRM: 'AZServiceConnection'
      
      - task: Cache@2
        displayName: Terraform Apply
        inputs:
          provider: 'azurerm'
          command: 'apply'
          commandOptions: |
            -auto-approve
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          environmentServiceNameAzureRM: 'AZServiceConnection'

  - stage: Build
    jobs:
      - job: Build
        pool:
          name: Hosted Ubuntu 1604
        steps:
          - task: ArchiveFiles@2
            displayName: "Archive FakeRestAPI"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/fakerestapi"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: '$(Build.BuildId)-fakerestapi.zip'

          - task: PublishPipelineArtifact@1
            displayName: "Upload farestapi Package"
            inputs:
              targetPath: $(Build.BuildId)-fakerestapi.zip
              artifactName: drop-fakerestapi

          - task: ArchiveFiles@2
            displayName: "Archive Selenium UI Tests"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/selenium"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: '$(Build.BuildId)/selenium-tests.zip'
              replaceExistingArchive: true
          - upload: $(Build.BuildId)/selenium-tests.zip
            artifact: selenium

  - stage: Wait
  # Delay further execution of a workflow by 5 minutes - to give time to add the VM to Pipeline Environment
  # and confgure the omsagent from Log analytics in the VM too.
    jobs:
      - job: RunsOnServer
        pool: Server
        steps:
        - task: Delay@1
          inputs:
            delayForMinutes: '5'

  - stage: Deployments
    displayName: Deployments
    jobs:
    - deployment: FakeRestAPIDeploy
      pool:
        vmImage: 'Ubuntu-18.04'
      environment: 'WEBAPP-TEST'
      strategy:
        runOnce:
- task: AzureRmWebAppDeployment@4
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'Azure subscription 1(d869cbf8-8990-4e0b-94ca-9ec4e5ee2463)'
    appType: 'webAppLinux'
    WebAppName: 
    packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'
          deploy:
            steps:
            - task: AzureWebApp@1
              displayName: 'Deploy Azure Web App'
              inputs:
                azureSubscription: 'd869cbf8-8990-4e0b-94ca-9ec4e5ee2463'
                appType: 'webAppLinux'
                appName: $(applicationname)
                package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
                deploymentMethod: 'auto'

    - deployment: VirtualMechnDeploy
      displayName: CICD Deploy
      environment:
        name:  'CICD-TEST'
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
            steps:
            - task: Bash@3
              displayName: 'Install Dependencies'
              inputs:
                targetType: 'inline'
                script: |
                  #! /bin/bash
                  
                  # sudo apt-get upgrade -y
                  # sudo apt-get install python3-pip -y
                  # sudo apt-get install unzip -y
                  # sudo apt-get install -y chromium-browser
                  # pip3 install selenium
                  
                  # download chrome driver v89
                  FILE=chromedriver_linux64.zip
                  if [ -f "$FILE" ]; then
                    echo "$FILE exists."
                  else
                    wget https://chromedriver.storage.googleapis.com/89.0.4389.23/chromedriver_linux64.zip
                  fi
                  # install chrome driver
                  unzip chromedriver_linux64.zip
                  sudo mv chromedriver /usr/bin/chromedriver
                  sudo chown root:root /usr/bin/chromedriver
                  sudo chmod +x /usr/bin/chromedriver
                  chromium-browser -version
                  chromedriver --version
                  # agent log analytics
                  wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w ba2f2875-7939-40f7-8fab-9fdfe5774935 -s rb9iiVdW/SUHbVCH4V83NX16EgaXKTEtX7WfGSxykJ3iCaZ/Tm/FFqigsvOAUajQZM0L5k9vAnyM3lD4Iv61cw==
                  sudo /opt/microsoft/omsagent/bin/service_control restart ba2f2875-7939-40f7-8fab-9fdfe5774935
            - download: current
              displayName: 'Download Selenium'
              artifact: selenium
            - task: Bash@3
              displayName: UI Tests
              inputs:
                targetType: 'inline'
                script: |
                  unzip -o $(Pipeline.Workspace)/selenium/selenium-tests.zip -d .
                  sudo mkdir /var/logs
                  python3 uitests.py > ui-logs.log
                  sudo mv ui-logs.log /var/logs
                  
  - stage: IntegrationTests
    displayName: Integration Tests
    jobs:
    - job: PostmanTests
      displayName: Postman Tests
      steps: 
      - task: NodeTool@0
        displayName: Install Node v14.X
        inputs:
          versionSpec: '14.x'
          checkLatest: true
      - task: CmdLine@2
        displayName: Install Newman
        inputs:
          script: 'npm install newman'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
      - task: CmdLine@2
        displayName: Run Regression Tests
        inputs:
          script: 'newman run postman/Regression_Test_Suite.postman_collection.json -e postman/Test_Suite.postman_environment.json --delay-request 5000 --bail newman -x --reporters cli,junit --reporter-junit-export Results/RegressionTests.xml --suppress-exit-code'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
        continueOnError: true
      - task: CmdLine@2
        displayName: Run Data Validation Tests
        inputs:
          script: 'newman run postman/Data_Validation_Test_Suite.postman_collection.json -e postman/Data_Validation_Test_Suite.postman_environment.json --delay-request 5000 --bail newman -x --reporters cli,junit --reporter-junit-export Results/DataValidationTests.xml --suppress-exit-code'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
        continueOnError: true
      - task: CmdLine@2
        inputs:
          script: 'ls -la ./Results/'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
      - task: PublishTestResults@2
        displayName: Publish Test Reports
        condition: always()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '$(System.DefaultWorkingDirectory)/Results/*.xml'

  - stage: JMeterTests
    displayName: JMeter Tests
    jobs:
    - job: JMETERTests
      displayName: Test JMeter
      pool:
        vmImage: 'ubuntu-18.04'
      steps:
      - bash: |
          sudo apt-get install openjdk-11-jre-headless -y
          java -version
          wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
          tar xzvf jmeter.tgz
          apache-jmeter-5.4/bin/jmeter --version
          # create log directory
          mkdir -p log/jmeter
          pwd
          ls -la
        displayName: Install JMeter
      - bash: |
          apache-jmeter-5.4/bin/jmeter -n -t jmeter/StressTestSuitev2.jmx \
                                       -l log/jmeter/stress-test-result.csv \
                                       -e -f -o log/jmeter/stress-test-html-report \
                                       -j log/jmeter/jmeter-stress-test.log
        displayName: JMeter stress test
      - bash: |
          apache-jmeter-5.4/bin/jmeter -n -t jmeter/EnduranceTestSuitev2.jmx \
                                       -l log/jmeter/endurance-test-result.csv \
                                       -e -f -o log/jmeter/endurance-test-html-report \
                                       -j log/jmeter/jmeter-endurance-test.log
        displayName: JMeter endurance test
      - task: ArchiveFiles@2
        displayName: Archive JMeter stress test HTML report
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip'
          verbose: true
      - task: ArchiveFiles@2
        displayName: Archive JMeter endurance test HTML report
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip'
          verbose: true
      - bash: |
          rm -rf log/jmeter/stress-test-html-report
          rm -rf log/jmeter/endurance-test-html-report
          cd log/jmeter
          pwd
          ls -la
        displayName: Delete original JMeter test HTML reports
      - task: PublishPipelineArtifact@1
        displayName: Publish JMeter logs
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
          artifactName: 'drop-jmeter-logs'

  - stage: UITests
    displayName: UI Tests - Selenium
    jobs:
    - deployment: VMRunUITests
      displayName: Run UI Tests
      environment:
        name:  'VM-TEST'
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              displayName: 'Download Selenium'
              artifact: selenium
            - task: Bash@3
              displayName: Selenium UI Tests
              inputs:
                targetType: 'inline'
                script: |
                  unzip -o $(Pipeline.Workspace)/selenium/selenium-tests.zip -d .
                  sudo mkdir -p /var/log/selenium
                  sudo chmod 664 /var/log/selenium
                  
                  sudo python3 -u uitests.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log
                  # copy selenium log file to $(System.DefaultWorkingDirectory)/log/selenium/
                  cd $(System.DefaultWorkingDirectory)
                  mkdir -p log/selenium
                  pwd
                  sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
                  ls -la
            - task: PublishPipelineArtifact@1
              displayName: Publish selenium logs
              inputs:
                targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-test.log'
                artifactName: 'drop-selenium-logs'

  - stage: WaitUserApproval
    displayName: User Approval
    jobs:
      - job: waitForValidation
        displayName: Wait for external validation
        pool: server
        timeoutInMinutes: 90 # job times out in 90 minutes
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 80 # task times out in 80 minutes
          inputs:
            notifyUsers: |
              jcdev@outlook.com
            instructions: 'Please validate the end of the Pipeline to destroy the Infraestructure'
            onTimeout: 'resume'
  
  - stage: DestroyIaC
    displayName: Destroy IaC
    jobs:
    - job: Destroy_Azure_IaC
      displayName: Destroy Azure IaC
      pool:
        vmImage: 'ubuntu-18.04'
      steps:
      - task: DownloadSecureFile@1
        name: tfvardef
        displayName: Download terraform.tfvars
        inputs:
          secureFile: 'terraform.tfvars'

      # # Needed for Terraform VM deployment
      # - task: InstallSSHKey@0
      #   displayName: Security Access
      #   inputs:
      #     knownHostsEntry: 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
      #     sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
      #     sshKeySecureFile: 'id_rsa'
      
      - task: Bash@3
        displayName: Copy terraform.tfvars
        inputs:
          targetType: 'inline'
          script: cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform
      
      - task: Cache@2
        displayName: Install Terraform
        inputs:
          terraformVersion: '0.14.8'
      
      - task: Cache@2
        displayName: Terraform Init
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: 'AZServiceConnection'
          backendAzureRmResourceGroupName: 'tstate'
          backendAzureRmStorageAccountName: 'tstate3994'
          backendAzureRmContainerName: 'tstate'
          backendAzureRmKey: 'terraform.tfstate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      
      - task: Cache@2
        displayName: Terraform Apply
        inputs:
          provider: 'azurerm'
          command: 'destroy'
          commandOptions: |
            -auto-approve
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          environmentServiceNameAzureRM: 'AZServiceConnection'
